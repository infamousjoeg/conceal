name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write  # Required for OIDC JWT authentication

jobs:
  fetch-secrets:
    runs-on: ubuntu-latest
    outputs:
      macos_sign_p12: ${{ steps.secrets.outputs.MACOS_SIGN_P12 }}
      macos_sign_password: ${{ steps.secrets.outputs.MACOS_SIGN_PASSWORD }}
      macos_sign_identity: ${{ steps.secrets.outputs.MACOS_SIGN_IDENTITY }}
      macos_notary_issuer_id: ${{ steps.secrets.outputs.MACOS_NOTARY_ISSUER_ID }}
      macos_notary_key_id: ${{ steps.secrets.outputs.MACOS_NOTARY_KEY_ID }}
      macos_notary_key: ${{ steps.secrets.outputs.MACOS_NOTARY_KEY }}
      macos_installer_p12: ${{ steps.secrets.outputs.MACOS_INSTALLER_P12 }}
      macos_installer_password: ${{ steps.secrets.outputs.MACOS_INSTALLER_PASSWORD }}
      macos_installer_identity: ${{ steps.secrets.outputs.MACOS_INSTALLER_IDENTITY }}
      keychain_password: ${{ steps.secrets.outputs.KEYCHAIN_PASSWORD }}
      chocolatey_api_key: ${{ steps.secrets.outputs.CHOCOLATEY_API_KEY }}
      committer_token: ${{ steps.secrets.outputs.COMMITTER_TOKEN }}
    steps:
    - name: Fetch secrets from CyberArk Conjur
      id: secrets
      uses: cyberark/conjur-action@v2.0.12
      with:
        url: https://pineapple.secretsmgr.cyberark.cloud/api
        authn_id: inf-github
        account: conjur
        secrets: |
          data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_SIGN_P12|MACOS_SIGN_P12;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_SIGN_PASSWORD|MACOS_SIGN_PASSWORD;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_SIGN_IDENTITY|MACOS_SIGN_IDENTITY;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_NOTARY_ISSUER_ID|MACOS_NOTARY_ISSUER_ID;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_NOTARY_KEY_ID|MACOS_NOTARY_KEY_ID;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_NOTARY_KEY|MACOS_NOTARY_KEY;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_INSTALLER_P12|MACOS_INSTALLER_P12;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_INSTALLER_PASSWORD|MACOS_INSTALLER_PASSWORD;data/infamousdevops/ci/github/infamousjoeg/conceal/MACOS_INSTALLER_IDENTITY|MACOS_INSTALLER_IDENTITY;data/infamousdevops/ci/github/infamousjoeg/conceal/KEYCHAIN_PASSWORD|KEYCHAIN_PASSWORD;data/infamousdevops/ci/github/infamousjoeg/conceal/CHOCOLATEY_API_KEY|CHOCOLATEY_API_KEY;data/infamousdevops/ci/github/infamousjoeg/conceal/COMMITTER_TOKEN|COMMITTER_TOKEN

  release:
    needs: fetch-secrets
    runs-on: macos-latest  # Changed to macOS for code signing and notarization
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: Generate changelog
      run: |
        # Generate changelog since last tag without committing (GoReleaser handles changelog)
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --oneline $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --oneline >> CHANGELOG.md
        fi
        echo "Generated changelog for reference"

    - name: Import Code-Signing Certificates
      if: ${{ needs.fetch-secrets.outputs.macos_sign_p12 != '' }}
      run: |
        # Create variables for certificate handling
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate and provisioning profile from secrets
        echo -n "${{ needs.fetch-secrets.outputs.macos_sign_p12 }}" | base64 --decode -o $CERTIFICATE_PATH
        
        # Create temporary keychain
        security create-keychain -p "${{ needs.fetch-secrets.outputs.keychain_password }}" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "${{ needs.fetch-secrets.outputs.keychain_password }}" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "${{ needs.fetch-secrets.outputs.macos_sign_password }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ needs.fetch-secrets.outputs.keychain_password }}" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: ${{ github.event_name == 'workflow_dispatch' && 'build --snapshot --clean' || 'release --clean --skip=validate --skip=chocolatey' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Apple Developer Code Signing (from Conjur)
        MACOS_SIGN_P12: ${{ needs.fetch-secrets.outputs.macos_sign_p12 }}
        MACOS_SIGN_PASSWORD: ${{ needs.fetch-secrets.outputs.macos_sign_password }}
        MACOS_SIGN_IDENTITY: ${{ needs.fetch-secrets.outputs.macos_sign_identity }}
        # Apple Developer Notarization (from Conjur)  
        MACOS_NOTARY_ISSUER_ID: ${{ needs.fetch-secrets.outputs.macos_notary_issuer_id }}
        MACOS_NOTARY_KEY_ID: ${{ needs.fetch-secrets.outputs.macos_notary_key_id }}
        MACOS_NOTARY_KEY: ${{ needs.fetch-secrets.outputs.macos_notary_key }}
        # Apple Developer ID Installer (from Conjur)
        MACOS_INSTALLER_P12: ${{ needs.fetch-secrets.outputs.macos_installer_p12 }}
        MACOS_INSTALLER_PASSWORD: ${{ needs.fetch-secrets.outputs.macos_installer_password }}
        MACOS_INSTALLER_IDENTITY: ${{ needs.fetch-secrets.outputs.macos_installer_identity }}
        # Chocolatey Package Management (from Conjur)
        CHOCOLATEY_API_KEY: ${{ needs.fetch-secrets.outputs.chocolatey_api_key }}

    - name: Clean up keychain
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

  homebrew-update:
    needs: [fetch-secrets, release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: conceal
        homebrew-tap: infamousjoeg/homebrew-tap
        base-branch: master
        formula-path: conceal.rb
      env:
        COMMITTER_TOKEN: ${{ needs.fetch-secrets.outputs.committer_token || secrets.COMMITTER_TOKEN }}

  chocolatey-release:
    needs: [fetch-secrets, release]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v5

    - name: Create Chocolatey package
      shell: powershell
      run: |
        # Get version from tag (remove 'v' prefix)
        $VERSION = "${{ github.ref_name }}".TrimStart('v')
        Write-Output "Creating Chocolatey package for version: $VERSION"
        
        # Create chocolatey directory structure
        New-Item -ItemType Directory -Force -Path "chocolatey/tools"
        
        # Get checksum for Windows x64 binary with retry logic
        $maxRetries = 3
        $retryDelay = 10
        $checksum = $null
        
        for ($i = 1; $i -le $maxRetries; $i++) {
          try {
            Write-Output ("Attempt {0} of {1}: Downloading checksums.txt..." -f $i, $maxRetries)
            
            # Wait a bit for release assets to be fully propagated
            if ($i -gt 1) {
              Write-Output ("Waiting {0} seconds before retry..." -f $retryDelay)
              Start-Sleep -Seconds $retryDelay
            }
            
            # Use proper headers and follow redirects
            $headers = @{
              'User-Agent' = 'GitHub Actions'
              'Accept' = 'application/octet-stream'
            }
            
            $response = Invoke-WebRequest -Uri "https://github.com/infamousjoeg/conceal/releases/download/v$VERSION/checksums.txt" -UseBasicParsing -Headers $headers -MaximumRedirection 5
            
            if ($response -and $response.Content) {
              Write-Output ("Successfully downloaded checksums.txt (Length: {0})" -f $response.Content.Length)
              Write-Output "Content preview:"
              Write-Output $response.Content.Substring(0, [Math]::Min(200, $response.Content.Length))
              
              $lines = $response.Content -split "`n"
              Write-Output ("Total lines: {0}" -f $lines.Count)
              
              $checksumLine = $lines | Where-Object { $_ -like "*conceal_Windows_x86_64.zip*" }
              Write-Output ("Matching lines: {0}" -f ($checksumLine -join ", "))
              
              if ($checksumLine) {
                $trimmedLine = $checksumLine.Trim()
                $checksum = ($trimmedLine -split "\s+")[0]
                Write-Output ("Found checksum: {0}" -f $checksum)
                break
              } else {
                throw "Windows x64 zip not found in checksums file"
              }
            } else {
              throw "Empty or null response from checksums.txt"
            }
          }
          catch {
            Write-Output ("Attempt {0} failed: {1}" -f $i, $_.Exception.Message)
            if ($i -eq $maxRetries) {
              Write-Error ("Failed to download checksums after {0} attempts" -f $maxRetries)
              exit 1
            }
          }
        }
        
        # Create nuspec file
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
          <metadata>
            <id>conceal</id>
            <version>$VERSION</version>
            <title>Conceal</title>
            <authors>Joe Garcia</authors>
            <projectUrl>https://github.com/infamousjoeg/conceal</projectUrl>
            <licenseUrl>https://github.com/infamousjoeg/conceal/blob/main/LICENSE</licenseUrl>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <projectSourceUrl>https://github.com/infamousjoeg/conceal</projectSourceUrl>
            <docsUrl>https://github.com/infamousjoeg/conceal/blob/main/README.md</docsUrl>
            <bugTrackerUrl>https://github.com/infamousjoeg/conceal/issues</bugTrackerUrl>
            <tags>security secrets credential-manager keychain summon cli</tags>
            <summary>Cross-platform secret management using native OS credential stores</summary>
            <description>Conceal is a cross-platform secret management tool that integrates with native OS credential stores:

        - Windows Credential Manager
        - macOS Keychain

        Features:
        - Store, retrieve, and manage secrets securely
        - Full Summon compatibility with "summon/" prefix
        - Clipboard integration with auto-clear
        - Cross-platform CLI interface</description>
            <releaseNotes>https://github.com/infamousjoeg/conceal/releases/tag/v$VERSION</releaseNotes>
            <copyright>2025 Joe Garcia</copyright>
          </metadata>
          <files>
            <file src="tools\**" target="tools" />
          </files>
        </package>
        "@ | Out-File -FilePath "chocolatey/conceal.nuspec" -Encoding UTF8
        
        # Create chocolatey install script
        @"
        `$ErrorActionPreference = 'Stop'
        `$toolsDir = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
        `$url64 = 'https://github.com/infamousjoeg/conceal/releases/download/v$VERSION/conceal_Windows_x86_64.zip'
        
        `$packageArgs = @{
          packageName   = 'conceal'
          unzipLocation = `$toolsDir
          fileType      = 'ZIP'  
          url64bit      = `$url64
          checksum64    = '$checksum'
          checksumType64 = 'sha256'
        }
        
        Install-ChocolateyZipPackage @packageArgs
        "@ | Out-File -FilePath "chocolatey/tools/chocolateyinstall.ps1" -Encoding UTF8
        
        # Build the package
        Push-Location chocolatey
        choco pack conceal.nuspec
        Pop-Location
        
        Write-Output "Chocolatey package created successfully"

    - name: Publish to Chocolatey
      if: ${{ needs.fetch-secrets.outputs.chocolatey_api_key != '' }}
      shell: powershell  
      run: |
        $VERSION = "${{ github.ref_name }}".TrimStart('v')
        $apiKey = "${{ needs.fetch-secrets.outputs.chocolatey_api_key }}"
        
        if ([string]::IsNullOrEmpty($apiKey)) {
          Write-Output "CHOCOLATEY_API_KEY is empty, skipping publication"
          exit 0
        }
        
        Push-Location chocolatey
        choco push "conceal.$VERSION.nupkg" --source https://push.chocolatey.org/ --api-key $apiKey
        Pop-Location
